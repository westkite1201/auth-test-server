#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
const fs = require('fs');
var http = require('http');
let https = require('https');
const path = require('path');

process.env.NODE_ENV =
  process.env.NODE_ENV &&
  process.env.NODE_ENV.trim().toLowerCase() == 'production'
    ? 'production'
    : 'development';
/**
 * Get port from environment and store in Express.
 */
let option;
let server;
let port;
// if (process.env.NODE_ENV === 'production') {
//   console.log('is prodiction');
//   port = normalizePort(process.env.PORT || '3031');
//   option = {
//     ca: fs.readFileSync('/etc/letsencrypt/live/www.hangang.site/fullchain.pem'),
//     key: fs
//       .readFileSync(
//         path.resolve(
//           process.cwd(),
//           '/etc/letsencrypt/live/www.hangang.site/privkey.pem',
//         ),
//         'utf8',
//       )
//       .toString(),
//     cert: fs
//       .readFileSync(
//         path.resolve(
//           process.cwd(),
//           '/etc/letsencrypt/live/www.hangang.site/cert.pem',
//         ),
//         'utf8',
//       )
//       .toString(),
//   };
//   server = https.createServer(option, app);
// } else {
//   console.log('is Development');
//   port = normalizePort(process.env.PORT || '3031');
//   server = http.createServer(app);
// }
port = normalizePort(process.env.PORT || '3031');
server = http.createServer(app);
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
